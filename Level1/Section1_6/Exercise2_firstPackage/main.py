'''
This main.py script showcases a few memorable functions for Level 1 of Quantnet's Python for Finance with Intro to Data Science:
'''

# Universal selective importing set up
import quickMaths.fibonacci.fibonnacciIterative # Showcase univeral importing

def main():

    print('This package shows my personal favorite functions for Level 1 of Quantnet\'s Python for Finance with Intro to Data Science:')

    print('\n##################################################')
    print('### Exercise2_firstPackage Demonstration Start ###')
    print('##################################################')

    # Importing set up
    # Set up explicit relative importing (for part 1)
    from Section1_6.Exercise2_firstPackage.firstPrograms.MyFirstFunction.MyFirstCode import helloworldfile
    from Section1_6.Exercise2_firstPackage.firstPrograms.MyFirstFunction import dayNumber
    from Section1_6.Exercise2_firstPackage.firstPrograms.firstComplexInput.firstKwarg import kwargs
    from Section1_6.Exercise2_firstPackage.firstPrograms.firstComplexInput import mortgage
    from Section1_6.Exercise2_firstPackage.firstPrograms import id_generator
    print('\nSetting up explicit relative importing for my first set of functions: Done')

    # Set up full-module imports (for part 2)
    import quickMaths.basicstats.average as average # variation 1
    import Section1_6.Exercise2_firstPackage.quickMaths.fibonacci.RecursiveVersion.fibonacciRecursion
    from Section1_6.Exercise2_firstPackage.quickMaths.basicstats.avebasedVariance import variance # relies on average function
    import Section1_6.Exercise2_firstPackage.quickMaths.mode
    print('Setting up full-module imports for my second set of functions: Done')

# Part 1
    print('\nI. First part of this program showcases my first set of programs (i.e. (1) helloworld, (2) dayNumber, and functions with complex inputs such as (3) mortgageRNG and (4) a function with kwarg). '
          '\nIt also showcases an interesting function I saw @Stack which allowed me to create my mortgage function - (5) id_generator.')


    # Explicit Relative Importing (printing the results of the helloworld function):
    print('\n(1) Showcasing my first function for this list: helloworld(any), which takes any argument and outputs \'hello world\':')
    helloworldfile.helloworld("a") # Explicit Relative importing

    # Explicit Relative Importing (printing the results of the dayNumber function):
    print('\n(2) Showcasing my second function for this list: dayNumber(1-7), which takes any number from 1-7 and outputs a corresponding day in the form (number, \'day\'):')
    print(dayNumber.dayNumber(1)) # Explicit Relative importing

    # Explicit Relative Importing (printing the results of the kwargs function):
    print('\n(3) Showcasing my third function for this list: myFunction(name, age, **kwargs), which takes any keyword arguments and enumerates them:')
    kwargs.myFunction('Jethro', 29, state='Metro Manila', height=69, weight=190, interests='investments and learning')

    # Explicit Relative Importing (printing the results of the mortgage function):
    print('\n(4) Showcasing my fourth function for this list: mortgage(number_mortgages), which returns a randomly generated list of mortgages between 100,1000 in thousands:')
    mortgage.mortgage(1000)

    # Explicit Relative Importing (printing the results of the id_generator function):
    print('\n(5) Showcasing my fifth function for this list: id_generator(length_of_string), which returns a randomly generated text with length dependent on your input:')
    print(id_generator.id_generator(6))

# Part 2
    print('\n\nII. Second part of this program showcases my first set of math functions (e.g. (1) fibonnaciIterative, (2) fibonacciRecursion, (3) average and (4) variance(based on average fnx), and putting'
          'many of these concepts together, a (5) mode function which uses input from another function: ')
    print('For simplicity, the list of Fibonnaci numbers up to 10 has been used as input to functions average (3), variance (4) and mode (5)')

# Taking the average of the fibonacci sequence:
    print('\n(1 - 2) (Showcasing Function (1) and Function (3)) The following code pulls a fibonacci sequence based on the length specified in the fibonacci function and the average function pulls the average of that:')
    fibo1 = quickMaths.fibonacci.fibonnacciIterative.fibonacci(10)
    print(fibo1)
    print('The average of the fibonacci sequence is', average.myAveFunction(fibo1),'.')

    print('\n(3) Showcasing Function (2): fibonacciRecursive, by duplicating the list generated by fibonacciIterative, which also generates a Fibonacci sequence of length entered as input in the function:')
    fibo2 = Section1_6.Exercise2_firstPackage.quickMaths.fibonacci.RecursiveVersion.fibonacciRecursion.fibonacciRecursive(10)
    print(fibo2)

    print('\nIs the sequence generated by fibonacciIterative = fibonacciRecurive (Logic Test - result 1 vs result 2)?',fibo1 == fibo2)

    print('\n(4) Showcasing Function (4): variance: Calculates variance based on a passed-in list (Fibonacci series), also uses input from the average function:')
    print('Passed-in List:',fibo1)
    variance_fibo = variance.myVarianceFunction(fibo1)

    print('\n(5) Showcasing Function (5): Mode: Calculates variance based on a passed-in list (Fibonacci series):')
    print(Section1_6.Exercise2_firstPackage.quickMaths.mode.mode(fibo1))

    print('\n################################################')
    print('### Exercise2_firstPackage Demonstration End ###')
    print('################################################')

if __name__=='__main__':
    main()